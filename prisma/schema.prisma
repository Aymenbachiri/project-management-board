datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]

  ownedBoards   Board[]       @relation("BoardOwner")
  boardMembers  BoardMember[]
  assignedTasks Task[]        @relation("TaskAssignee")
  taskComments  Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Board {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?

  ownerId String @db.ObjectId
  owner   User   @relation("BoardOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  columns BoardColumn[]

  tasks   Task[]
  members BoardMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BoardColumnId {
  todo
  in_progress
  done
}

enum BoardColumnTitle {
  To_Do
  In_Progress
  Done
}

enum BoardColumnColor {
  Red // #ef4444
  Orange // #f59e0b
  Green // #10b981
}

model BoardColumn {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  columnId BoardColumnId
  title    BoardColumnTitle
  color    BoardColumnColor
  order    Int

  boardId String @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, order])
}

model BoardMember {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  role String @default("member")

  boardId String @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, userId])
}

enum TaskStatus {
  todo
  in_progress
  done
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?

  status   TaskStatus
  priority Priority

  assigneeId String? @db.ObjectId
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  dueDate DateTime?

  tags  String[]
  order Int      @default(0)

  boardId String @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  columnId String      @db.ObjectId
  column   BoardColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)

  comments    Comment[]
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId, status])
  @@index([assigneeId])
  @@index([dueDate])
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([authorId])
}

model Attachment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String
  type String
  size Int

  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
}
